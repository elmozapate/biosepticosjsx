import AbsoluteBox from '@/components/containers/absoluteBox';
import Declaraciones from '@/engine/declaraciones';
import MiddlewareSelector from '@/middleware/askSelector';
import SocketOn, { Socket } from '@/middleware/routes/connect/socket/socketOn';
import Head from 'next/head'
import { useEffect } from 'react';
const objCss = Declaraciones({ language: 'spanish', type: 'styles' }).styles
const socket = Socket
let resId = -1
export default function Home(props) {
    const sendData = () => {
        const res = MiddlewareSelector({
            ask: `sendData-emailCheck`, data: props.token
        })
        resId = res
    }
    useEffect(() => {
        resId === -1 && sendData()
        socket.on("bioApp", (msg) => {
            const actionTodo = msg.actionTodo
            const Data = msg.dataIn
            switch (actionTodo) {
                case 'dataRes-emailCheck':
                    if (parseInt(msg.resId) === parseInt(resId)) {
                        window.location.replace('http://localhost:3000')
                    }
                    break;
                default:
                    break;
            }
        })
    }, [])
    return (
        <>
            <Head>
                <title>VERIDICANDO CUENTA...</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={'div-main'}>
                <SocketOn />
                <AbsoluteBox popUp={{ type: 'inVerification', active: true }} objCss={objCss} />
            </main>
        </>
    )
}
export async function getServerSideProps({ req, query }) {
    const querytext = query.token || ''
    const forwarded = req.headers["x-forwarded-for"]
    const ip = forwarded ? forwarded.split(/, /)[0] : req.connection.remoteAddress
    let min = 1111111110
    let max = 9000000000
    return {
        props: {
            ip: /* Math.floor(Math.random() * (max - min)) + min */ ip,
            token: querytext
        },
    }
}