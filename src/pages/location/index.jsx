import ContenedorMaps from '@/bioApp/componentes/contenedorMaps';
import Declaraciones from '@/engine/declaraciones';
import  { Socket } from '@/middleware/routes/connect/socket/socketOn';
import Head from 'next/head'
import { useEffect, useState } from 'react';
const objCss = Declaraciones({ language: 'spanish', type: 'styles' }).styles
const socket = Socket
let reqId = -1
let start = false
export default function Home(props) {
    const [userMap, setUsersMap] = useState([])
    const [visorObj, setVisorObj] = useState({
        id: props.id,
        ip: props.ip,
        location: { lat: 6.2476376, lng: -75.56581530000001 }
    })
    const sendData = (type) => {
        if (props.type === 'obj' && type === 1) {
            reqId = parseInt(Math.random() * 9999999999)
            socket.emit('bioSepticosMap', {
                'dataIn': {
                    id: props.id,
                    ip: props.ip
                },
                ip: props.ip,
                id: props.id,
                actionTodo: "userObj",
                reqId: reqId,
                type: props.type

            });
        }
        if (props.type === 'visor' && type === 2) {
            reqId = parseInt(Math.random() * 9999999999)
            socket.emit('bioSepticosMap', {
                'dataIn': {
                    id: props.id,
                    ip: props.ip
                },
                ip: props.ip,
                id: props.id,
                actionTodo: "visorObj",
                reqId: reqId,
                type: props.type
            });
        }
    }
    useEffect(() => {
        if (!start && visorObj.ip !== -1) {
            start = true
            props.type === 'obj' && reqId === -1 && sendData(1)
            props.type === 'visor' && reqId === -1 && sendData(2)
            props.type === 'obj' && socket.on("bioSepticosMap", (msg) => {
                const resId = msg.resId
                const actionTodo = msg.actionTodo
                const Data = msg.dataIn
                switch (actionTodo) {
                    case 'dataRes-userObj':
                        if (reqId === resId) {
/*                             console.log('correcto');
 */                        }
                        break;
                    default:
                        break;
                }
            })
            props.type === 'visor' && socket.on("bioSepticosMapAdmin", (msg) => {
                const resId = msg.resId
                const actionTodo = msg.actionTodo
                const Data = msg.dataIn
                const usersMapRes = msg.dataIn.usersMap
                switch (actionTodo) {
                    case 'dataRes-visorObj':
                        if (reqId === resId) {
                            setUsersMap(usersMapRes)
                        }
                        break;
                    case 'dataRes-visorObjNew':
                        setUsersMap(usersMapRes)
                        if (visorObj.id !== props.id) {
                            let vive = false
                            usersMapRes.map((key, i) => {
                                if (key.id === visorObj.id) {
                                    vive = true
                                }
                            })
                            if (!vive) {
                                setVisorObj({
                                    ...visorObj,
                                    id: props.id,
                                    ip: props.ip
                                })
                                window.alert('usuario desconectado')
                            }
                        }



                        break;

                    case 'dataRes-visorObjs':
                        setUsersMap(usersMapRes)
                        break;
                    default:
                        break;
                }
            })
        }
    }, [visorObj])
    const getId = () => {
        return visorObj.id
    }
    return (
        <>
            <Head>
                <title>BIOMAPS</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={'div-main'}>
                {
                    props.type === 'obj' &&
                    <>
                        <div key={`key-${(parseInt(Math.random() * 9999999999)).toString()}`} className='colFlex flex-row transparent visor-cont'>
                            {
                                <><ContenedorMaps getId={getId} rastreado visorObj={visorObj} /></>
                            }

                        </div>
                    </>
                }
                {
                    props.type === 'visor' &&
                    <>
                        <div key={`key-${(parseInt(Math.random() * 9999999999)).toString()}`} className='flex-row transparent visor-cont'>

                            {
                                <>{visorObj.id !== props.id && <ContenedorMaps getId={getId} visorObj={visorObj} normal={visorObj.ip === props.ip ? true : false} receptor={visorObj.ip !== props.ip ? true : false} />}
                                </>
                            }
                            <div className='  flex-row transparent wdt-visor visor-cont'>

                                <div>
                                    {visorObj.id === props.id ? 'USUARIOS EN LINEA' : `VIEMDO A ${visorObj.id}`}
                                    {props.id !== visorObj.id && <span onClick={(e) => {
                                        e.preventDefault(); setVisorObj({
                                            ...visorObj,
                                            id: props.id,
                                            ip: props.ip
                                        })
                                            ;/*  window.location.reload() */
                                    }}>DEJR DE VER </span>}
                                    {visorObj.id === props.id && userMap.map((key, i) => {
                                        return (
                                            <>
                                                <p key={`key-${(parseInt(Math.random() * 9999999999)).toString()}`} onClick={(e) => {
                                                    e.preventDefault(); setVisorObj({
                                                        ...visorObj,
                                                        id: key.id,
                                                        ip: key.ip
                                                    })
                                                }}>{key.id}</p>
                                            </>
                                        )
                                    })}
                                </div>

                            </div>
                        </div>


                    </>
                }
                {/*  <SocketOn />
                <AbsoluteBox popUp={{ type: 'inVerification', active: true }} objCss={objCss} /> */}
            </main>
        </>
    )
}
export async function getServerSideProps({ req, query }) {
    const queryType = query.type || ''
    const queryId = query.id || ''
    const forwarded = req.headers["x-forwarded-for"]
    const ip = forwarded ? forwarded.split(/, /)[0] : req.connection.remoteAddress
    return {
        props: {
            ip: Math.floor(Math.random() * (99999 - 10000)) + 10000 /* ip */,
            id: queryId,
            type: queryType
        },
    }
}